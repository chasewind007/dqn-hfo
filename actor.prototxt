name: "Actor"
force_backward: true
# debug_info: true
layer {
  name: "state_input_layer"
  type: "MemoryData"
  top: "states"
  top: "dummy1"
  memory_data_param {
    batch_size: 32
    channels: 1
    height: 58
    width: 1
  }
}
# layer {
#   name: "target_input_layer"
#   type: "MemoryData"
#   top: "target"
#   top: "dummy2"
#   memory_data_param {
#     batch_size: 32
#     channels: 1
#     height: 1
#     width: 1
#   }
# }
layer {
  name: "silence_layer"
  type: "Silence"
  bottom: "dummy1"
  # bottom: "dummy2"
}
layer {
  name: "ip1_layer"
  type: "InnerProduct"
  bottom: "states"
  top: "ip1"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "ip1_relu_layer"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip2_layer"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "ip2_relu_layer"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip3_layer"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  inner_product_param {
    num_output: 200
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "ip3_relu_layer"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "ip4_layer"
  type: "InnerProduct"
  bottom: "ip3"
  top: "ip4"
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "ip4_relu_layer"
  type: "ReLU"
  bottom: "ip4"
  top: "ip4"
  relu_param {
    negative_slope: 0.01
  }
}
layer {
  name: "action_layer"
  type: "InnerProduct"
  bottom: "ip4"
  top: "actions"
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "softmax_action_layer"
  type: "Softmax"
  bottom: "actions"
  top: "actions"
  softmax_param {
    axis: 1
  }
}
# layer {
#   name: "multinomial_logistic_loss_layer"
#   type: "MultinomialLogisticLoss"
#   bottom: "actions"
#   bottom: "target"
#   top: "loss"
# }
layer {
  name: "actionpara_layer"
  type: "InnerProduct"
  bottom: "ip4"
  top: "action_params"
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}